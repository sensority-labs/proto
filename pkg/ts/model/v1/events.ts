// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: model/v1/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "model.v1";

export interface BlockEvent {
  blockHash: string;
  blockNumber: string;
  network: BlockEvent_Network | undefined;
  block: BlockEvent_Block | undefined;
}

export interface BlockEvent_Network {
  chainId: string;
}

export interface BlockEvent_Block {
  difficulty: string;
  extraData: string;
  gasLimit: string;
  gasUsed: string;
  hash: string;
  logsBloom: string;
  miner: string;
  mixHash: string;
  nonce: string;
  number: string;
  parentHash: string;
  receiptsRoot: string;
  sha3Uncles: string;
  size: string;
  stateRoot: string;
  timestamp: string;
  totalDifficulty: string;
  transactions: string[];
  transactionsRoot: string;
  uncles: string[];
  baseFeePerGas: string;
}

export interface TransactionEvent {
  transaction: TransactionEvent_Transaction | undefined;
  network: TransactionEvent_Network | undefined;
  addresses: { [key: string]: boolean };
  block: TransactionEvent_Block | undefined;
  isContractDeployment: boolean;
  contractAddress: string;
  txAddresses: { [key: string]: boolean };
  receipt: TransactionReceipt | undefined;
}

export interface TransactionEvent_Network {
  chainId: string;
}

export interface TransactionEvent_Block {
  blockHash: string;
  blockNumber: string;
  blockTimestamp: string;
  baseFeePerGas: string;
}

export interface TransactionEvent_Transaction {
  type: string;
  nonce: string;
  gasPrice: string;
  gas: string;
  value: string;
  input: string;
  v: string;
  r: string;
  s: string;
  to: string;
  hash: string;
  from: string;
  maxFeePerGas: string;
  maxPriorityFeePerGas: string;
}

export interface TransactionEvent_AddressesEntry {
  key: string;
  value: boolean;
}

export interface TransactionEvent_TxAddressesEntry {
  key: string;
  value: boolean;
}

export interface BigInt {
  bytes: Uint8Array;
}

export interface TransactionLog {
  address: string;
  topics: string[];
  data: string;
  blockNumber: string;
  transactionHash: string;
  transactionIndex: string;
  blockHash: string;
  logIndex: string;
  removed: boolean;
}

export interface TransactionReceipt {
  blobGasUsed?: BigInt | undefined;
  blockHash: string;
  blockNumber: number;
  contractAddress?: string | undefined;
  cumulativeGasUsed: BigInt | undefined;
  effectiveGasPrice: BigInt | undefined;
  from: string;
  gasUsed: BigInt | undefined;
  logs: TransactionLog[];
  logsBloom: string;
  root?: string | undefined;
  status: string;
  to: string;
  transactionHash: string;
  transactionIndex: number;
  type: string;
}

function createBaseBlockEvent(): BlockEvent {
  return { blockHash: "", blockNumber: "", network: undefined, block: undefined };
}

export const BlockEvent: MessageFns<BlockEvent> = {
  encode(message: BlockEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blockHash !== "") {
      writer.uint32(10).string(message.blockHash);
    }
    if (message.blockNumber !== "") {
      writer.uint32(18).string(message.blockNumber);
    }
    if (message.network !== undefined) {
      BlockEvent_Network.encode(message.network, writer.uint32(26).fork()).join();
    }
    if (message.block !== undefined) {
      BlockEvent_Block.encode(message.block, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BlockEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlockEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.blockHash = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.blockNumber = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.network = BlockEvent_Network.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.block = BlockEvent_Block.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BlockEvent {
    return {
      blockHash: isSet(object.blockHash) ? gt.String(object.blockHash) : "",
      blockNumber: isSet(object.blockNumber) ? gt.String(object.blockNumber) : "",
      network: isSet(object.network) ? BlockEvent_Network.fromJSON(object.network) : undefined,
      block: isSet(object.block) ? BlockEvent_Block.fromJSON(object.block) : undefined,
    };
  },

  toJSON(message: BlockEvent): unknown {
    const obj: any = {};
    if (message.blockHash !== "") {
      obj.blockHash = message.blockHash;
    }
    if (message.blockNumber !== "") {
      obj.blockNumber = message.blockNumber;
    }
    if (message.network !== undefined) {
      obj.network = BlockEvent_Network.toJSON(message.network);
    }
    if (message.block !== undefined) {
      obj.block = BlockEvent_Block.toJSON(message.block);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BlockEvent>, I>>(base?: I): BlockEvent {
    return BlockEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BlockEvent>, I>>(object: I): BlockEvent {
    const message = createBaseBlockEvent();
    message.blockHash = object.blockHash ?? "";
    message.blockNumber = object.blockNumber ?? "";
    message.network = (object.network !== undefined && object.network !== null)
      ? BlockEvent_Network.fromPartial(object.network)
      : undefined;
    message.block = (object.block !== undefined && object.block !== null)
      ? BlockEvent_Block.fromPartial(object.block)
      : undefined;
    return message;
  },
};

function createBaseBlockEvent_Network(): BlockEvent_Network {
  return { chainId: "" };
}

export const BlockEvent_Network: MessageFns<BlockEvent_Network> = {
  encode(message: BlockEvent_Network, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chainId !== "") {
      writer.uint32(10).string(message.chainId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BlockEvent_Network {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlockEvent_Network();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.chainId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BlockEvent_Network {
    return { chainId: isSet(object.chainId) ? gt.String(object.chainId) : "" };
  },

  toJSON(message: BlockEvent_Network): unknown {
    const obj: any = {};
    if (message.chainId !== "") {
      obj.chainId = message.chainId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BlockEvent_Network>, I>>(base?: I): BlockEvent_Network {
    return BlockEvent_Network.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BlockEvent_Network>, I>>(object: I): BlockEvent_Network {
    const message = createBaseBlockEvent_Network();
    message.chainId = object.chainId ?? "";
    return message;
  },
};

function createBaseBlockEvent_Block(): BlockEvent_Block {
  return {
    difficulty: "",
    extraData: "",
    gasLimit: "",
    gasUsed: "",
    hash: "",
    logsBloom: "",
    miner: "",
    mixHash: "",
    nonce: "",
    number: "",
    parentHash: "",
    receiptsRoot: "",
    sha3Uncles: "",
    size: "",
    stateRoot: "",
    timestamp: "",
    totalDifficulty: "",
    transactions: [],
    transactionsRoot: "",
    uncles: [],
    baseFeePerGas: "",
  };
}

export const BlockEvent_Block: MessageFns<BlockEvent_Block> = {
  encode(message: BlockEvent_Block, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.difficulty !== "") {
      writer.uint32(10).string(message.difficulty);
    }
    if (message.extraData !== "") {
      writer.uint32(18).string(message.extraData);
    }
    if (message.gasLimit !== "") {
      writer.uint32(26).string(message.gasLimit);
    }
    if (message.gasUsed !== "") {
      writer.uint32(34).string(message.gasUsed);
    }
    if (message.hash !== "") {
      writer.uint32(42).string(message.hash);
    }
    if (message.logsBloom !== "") {
      writer.uint32(50).string(message.logsBloom);
    }
    if (message.miner !== "") {
      writer.uint32(58).string(message.miner);
    }
    if (message.mixHash !== "") {
      writer.uint32(66).string(message.mixHash);
    }
    if (message.nonce !== "") {
      writer.uint32(74).string(message.nonce);
    }
    if (message.number !== "") {
      writer.uint32(82).string(message.number);
    }
    if (message.parentHash !== "") {
      writer.uint32(90).string(message.parentHash);
    }
    if (message.receiptsRoot !== "") {
      writer.uint32(98).string(message.receiptsRoot);
    }
    if (message.sha3Uncles !== "") {
      writer.uint32(106).string(message.sha3Uncles);
    }
    if (message.size !== "") {
      writer.uint32(114).string(message.size);
    }
    if (message.stateRoot !== "") {
      writer.uint32(122).string(message.stateRoot);
    }
    if (message.timestamp !== "") {
      writer.uint32(130).string(message.timestamp);
    }
    if (message.totalDifficulty !== "") {
      writer.uint32(138).string(message.totalDifficulty);
    }
    for (const v of message.transactions) {
      writer.uint32(146).string(v!);
    }
    if (message.transactionsRoot !== "") {
      writer.uint32(154).string(message.transactionsRoot);
    }
    for (const v of message.uncles) {
      writer.uint32(162).string(v!);
    }
    if (message.baseFeePerGas !== "") {
      writer.uint32(170).string(message.baseFeePerGas);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BlockEvent_Block {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlockEvent_Block();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.difficulty = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.extraData = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.gasLimit = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.gasUsed = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.hash = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.logsBloom = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.miner = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.mixHash = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.nonce = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.number = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.parentHash = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.receiptsRoot = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.sha3Uncles = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.size = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.stateRoot = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.timestamp = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.totalDifficulty = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.transactions.push(reader.string());
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.transactionsRoot = reader.string();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.uncles.push(reader.string());
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.baseFeePerGas = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BlockEvent_Block {
    return {
      difficulty: isSet(object.difficulty) ? gt.String(object.difficulty) : "",
      extraData: isSet(object.extraData) ? gt.String(object.extraData) : "",
      gasLimit: isSet(object.gasLimit) ? gt.String(object.gasLimit) : "",
      gasUsed: isSet(object.gasUsed) ? gt.String(object.gasUsed) : "",
      hash: isSet(object.hash) ? gt.String(object.hash) : "",
      logsBloom: isSet(object.logsBloom) ? gt.String(object.logsBloom) : "",
      miner: isSet(object.miner) ? gt.String(object.miner) : "",
      mixHash: isSet(object.mixHash) ? gt.String(object.mixHash) : "",
      nonce: isSet(object.nonce) ? gt.String(object.nonce) : "",
      number: isSet(object.number) ? gt.String(object.number) : "",
      parentHash: isSet(object.parentHash) ? gt.String(object.parentHash) : "",
      receiptsRoot: isSet(object.receiptsRoot) ? gt.String(object.receiptsRoot) : "",
      sha3Uncles: isSet(object.sha3Uncles) ? gt.String(object.sha3Uncles) : "",
      size: isSet(object.size) ? gt.String(object.size) : "",
      stateRoot: isSet(object.stateRoot) ? gt.String(object.stateRoot) : "",
      timestamp: isSet(object.timestamp) ? gt.String(object.timestamp) : "",
      totalDifficulty: isSet(object.totalDifficulty) ? gt.String(object.totalDifficulty) : "",
      transactions: gt.Array.isArray(object?.transactions) ? object.transactions.map((e: any) => gt.String(e)) : [],
      transactionsRoot: isSet(object.transactionsRoot) ? gt.String(object.transactionsRoot) : "",
      uncles: gt.Array.isArray(object?.uncles) ? object.uncles.map((e: any) => gt.String(e)) : [],
      baseFeePerGas: isSet(object.baseFeePerGas) ? gt.String(object.baseFeePerGas) : "",
    };
  },

  toJSON(message: BlockEvent_Block): unknown {
    const obj: any = {};
    if (message.difficulty !== "") {
      obj.difficulty = message.difficulty;
    }
    if (message.extraData !== "") {
      obj.extraData = message.extraData;
    }
    if (message.gasLimit !== "") {
      obj.gasLimit = message.gasLimit;
    }
    if (message.gasUsed !== "") {
      obj.gasUsed = message.gasUsed;
    }
    if (message.hash !== "") {
      obj.hash = message.hash;
    }
    if (message.logsBloom !== "") {
      obj.logsBloom = message.logsBloom;
    }
    if (message.miner !== "") {
      obj.miner = message.miner;
    }
    if (message.mixHash !== "") {
      obj.mixHash = message.mixHash;
    }
    if (message.nonce !== "") {
      obj.nonce = message.nonce;
    }
    if (message.number !== "") {
      obj.number = message.number;
    }
    if (message.parentHash !== "") {
      obj.parentHash = message.parentHash;
    }
    if (message.receiptsRoot !== "") {
      obj.receiptsRoot = message.receiptsRoot;
    }
    if (message.sha3Uncles !== "") {
      obj.sha3Uncles = message.sha3Uncles;
    }
    if (message.size !== "") {
      obj.size = message.size;
    }
    if (message.stateRoot !== "") {
      obj.stateRoot = message.stateRoot;
    }
    if (message.timestamp !== "") {
      obj.timestamp = message.timestamp;
    }
    if (message.totalDifficulty !== "") {
      obj.totalDifficulty = message.totalDifficulty;
    }
    if (message.transactions?.length) {
      obj.transactions = message.transactions;
    }
    if (message.transactionsRoot !== "") {
      obj.transactionsRoot = message.transactionsRoot;
    }
    if (message.uncles?.length) {
      obj.uncles = message.uncles;
    }
    if (message.baseFeePerGas !== "") {
      obj.baseFeePerGas = message.baseFeePerGas;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BlockEvent_Block>, I>>(base?: I): BlockEvent_Block {
    return BlockEvent_Block.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BlockEvent_Block>, I>>(object: I): BlockEvent_Block {
    const message = createBaseBlockEvent_Block();
    message.difficulty = object.difficulty ?? "";
    message.extraData = object.extraData ?? "";
    message.gasLimit = object.gasLimit ?? "";
    message.gasUsed = object.gasUsed ?? "";
    message.hash = object.hash ?? "";
    message.logsBloom = object.logsBloom ?? "";
    message.miner = object.miner ?? "";
    message.mixHash = object.mixHash ?? "";
    message.nonce = object.nonce ?? "";
    message.number = object.number ?? "";
    message.parentHash = object.parentHash ?? "";
    message.receiptsRoot = object.receiptsRoot ?? "";
    message.sha3Uncles = object.sha3Uncles ?? "";
    message.size = object.size ?? "";
    message.stateRoot = object.stateRoot ?? "";
    message.timestamp = object.timestamp ?? "";
    message.totalDifficulty = object.totalDifficulty ?? "";
    message.transactions = object.transactions?.map((e) => e) || [];
    message.transactionsRoot = object.transactionsRoot ?? "";
    message.uncles = object.uncles?.map((e) => e) || [];
    message.baseFeePerGas = object.baseFeePerGas ?? "";
    return message;
  },
};

function createBaseTransactionEvent(): TransactionEvent {
  return {
    transaction: undefined,
    network: undefined,
    addresses: {},
    block: undefined,
    isContractDeployment: false,
    contractAddress: "",
    txAddresses: {},
    receipt: undefined,
  };
}

export const TransactionEvent: MessageFns<TransactionEvent> = {
  encode(message: TransactionEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.transaction !== undefined) {
      TransactionEvent_Transaction.encode(message.transaction, writer.uint32(10).fork()).join();
    }
    if (message.network !== undefined) {
      TransactionEvent_Network.encode(message.network, writer.uint32(18).fork()).join();
    }
    Object.entries(message.addresses).forEach(([key, value]) => {
      TransactionEvent_AddressesEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    if (message.block !== undefined) {
      TransactionEvent_Block.encode(message.block, writer.uint32(34).fork()).join();
    }
    if (message.isContractDeployment !== false) {
      writer.uint32(40).bool(message.isContractDeployment);
    }
    if (message.contractAddress !== "") {
      writer.uint32(50).string(message.contractAddress);
    }
    Object.entries(message.txAddresses).forEach(([key, value]) => {
      TransactionEvent_TxAddressesEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).join();
    });
    if (message.receipt !== undefined) {
      TransactionReceipt.encode(message.receipt, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TransactionEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.transaction = TransactionEvent_Transaction.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.network = TransactionEvent_Network.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const entry3 = TransactionEvent_AddressesEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.addresses[entry3.key] = entry3.value;
          }
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.block = TransactionEvent_Block.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.isContractDeployment = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.contractAddress = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          const entry7 = TransactionEvent_TxAddressesEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.txAddresses[entry7.key] = entry7.value;
          }
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.receipt = TransactionReceipt.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionEvent {
    return {
      transaction: isSet(object.transaction) ? TransactionEvent_Transaction.fromJSON(object.transaction) : undefined,
      network: isSet(object.network) ? TransactionEvent_Network.fromJSON(object.network) : undefined,
      addresses: isObject(object.addresses)
        ? Object.entries(object.addresses).reduce<{ [key: string]: boolean }>((acc, [key, value]) => {
          acc[key] = Boolean(value);
          return acc;
        }, {})
        : {},
      block: isSet(object.block) ? TransactionEvent_Block.fromJSON(object.block) : undefined,
      isContractDeployment: isSet(object.isContractDeployment) ? gt.Boolean(object.isContractDeployment) : false,
      contractAddress: isSet(object.contractAddress) ? gt.String(object.contractAddress) : "",
      txAddresses: isObject(object.txAddresses)
        ? Object.entries(object.txAddresses).reduce<{ [key: string]: boolean }>((acc, [key, value]) => {
          acc[key] = Boolean(value);
          return acc;
        }, {})
        : {},
      receipt: isSet(object.receipt) ? TransactionReceipt.fromJSON(object.receipt) : undefined,
    };
  },

  toJSON(message: TransactionEvent): unknown {
    const obj: any = {};
    if (message.transaction !== undefined) {
      obj.transaction = TransactionEvent_Transaction.toJSON(message.transaction);
    }
    if (message.network !== undefined) {
      obj.network = TransactionEvent_Network.toJSON(message.network);
    }
    if (message.addresses) {
      const entries = Object.entries(message.addresses);
      if (entries.length > 0) {
        obj.addresses = {};
        entries.forEach(([k, v]) => {
          obj.addresses[k] = v;
        });
      }
    }
    if (message.block !== undefined) {
      obj.block = TransactionEvent_Block.toJSON(message.block);
    }
    if (message.isContractDeployment !== false) {
      obj.isContractDeployment = message.isContractDeployment;
    }
    if (message.contractAddress !== "") {
      obj.contractAddress = message.contractAddress;
    }
    if (message.txAddresses) {
      const entries = Object.entries(message.txAddresses);
      if (entries.length > 0) {
        obj.txAddresses = {};
        entries.forEach(([k, v]) => {
          obj.txAddresses[k] = v;
        });
      }
    }
    if (message.receipt !== undefined) {
      obj.receipt = TransactionReceipt.toJSON(message.receipt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransactionEvent>, I>>(base?: I): TransactionEvent {
    return TransactionEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransactionEvent>, I>>(object: I): TransactionEvent {
    const message = createBaseTransactionEvent();
    message.transaction = (object.transaction !== undefined && object.transaction !== null)
      ? TransactionEvent_Transaction.fromPartial(object.transaction)
      : undefined;
    message.network = (object.network !== undefined && object.network !== null)
      ? TransactionEvent_Network.fromPartial(object.network)
      : undefined;
    message.addresses = Object.entries(object.addresses ?? {}).reduce<{ [key: string]: boolean }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = gt.Boolean(value);
        }
        return acc;
      },
      {},
    );
    message.block = (object.block !== undefined && object.block !== null)
      ? TransactionEvent_Block.fromPartial(object.block)
      : undefined;
    message.isContractDeployment = object.isContractDeployment ?? false;
    message.contractAddress = object.contractAddress ?? "";
    message.txAddresses = Object.entries(object.txAddresses ?? {}).reduce<{ [key: string]: boolean }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = gt.Boolean(value);
        }
        return acc;
      },
      {},
    );
    message.receipt = (object.receipt !== undefined && object.receipt !== null)
      ? TransactionReceipt.fromPartial(object.receipt)
      : undefined;
    return message;
  },
};

function createBaseTransactionEvent_Network(): TransactionEvent_Network {
  return { chainId: "" };
}

export const TransactionEvent_Network: MessageFns<TransactionEvent_Network> = {
  encode(message: TransactionEvent_Network, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chainId !== "") {
      writer.uint32(10).string(message.chainId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TransactionEvent_Network {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionEvent_Network();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.chainId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionEvent_Network {
    return { chainId: isSet(object.chainId) ? gt.String(object.chainId) : "" };
  },

  toJSON(message: TransactionEvent_Network): unknown {
    const obj: any = {};
    if (message.chainId !== "") {
      obj.chainId = message.chainId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransactionEvent_Network>, I>>(base?: I): TransactionEvent_Network {
    return TransactionEvent_Network.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransactionEvent_Network>, I>>(object: I): TransactionEvent_Network {
    const message = createBaseTransactionEvent_Network();
    message.chainId = object.chainId ?? "";
    return message;
  },
};

function createBaseTransactionEvent_Block(): TransactionEvent_Block {
  return { blockHash: "", blockNumber: "", blockTimestamp: "", baseFeePerGas: "" };
}

export const TransactionEvent_Block: MessageFns<TransactionEvent_Block> = {
  encode(message: TransactionEvent_Block, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blockHash !== "") {
      writer.uint32(10).string(message.blockHash);
    }
    if (message.blockNumber !== "") {
      writer.uint32(18).string(message.blockNumber);
    }
    if (message.blockTimestamp !== "") {
      writer.uint32(26).string(message.blockTimestamp);
    }
    if (message.baseFeePerGas !== "") {
      writer.uint32(34).string(message.baseFeePerGas);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TransactionEvent_Block {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionEvent_Block();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.blockHash = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.blockNumber = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.blockTimestamp = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.baseFeePerGas = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionEvent_Block {
    return {
      blockHash: isSet(object.blockHash) ? gt.String(object.blockHash) : "",
      blockNumber: isSet(object.blockNumber) ? gt.String(object.blockNumber) : "",
      blockTimestamp: isSet(object.blockTimestamp) ? gt.String(object.blockTimestamp) : "",
      baseFeePerGas: isSet(object.baseFeePerGas) ? gt.String(object.baseFeePerGas) : "",
    };
  },

  toJSON(message: TransactionEvent_Block): unknown {
    const obj: any = {};
    if (message.blockHash !== "") {
      obj.blockHash = message.blockHash;
    }
    if (message.blockNumber !== "") {
      obj.blockNumber = message.blockNumber;
    }
    if (message.blockTimestamp !== "") {
      obj.blockTimestamp = message.blockTimestamp;
    }
    if (message.baseFeePerGas !== "") {
      obj.baseFeePerGas = message.baseFeePerGas;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransactionEvent_Block>, I>>(base?: I): TransactionEvent_Block {
    return TransactionEvent_Block.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransactionEvent_Block>, I>>(object: I): TransactionEvent_Block {
    const message = createBaseTransactionEvent_Block();
    message.blockHash = object.blockHash ?? "";
    message.blockNumber = object.blockNumber ?? "";
    message.blockTimestamp = object.blockTimestamp ?? "";
    message.baseFeePerGas = object.baseFeePerGas ?? "";
    return message;
  },
};

function createBaseTransactionEvent_Transaction(): TransactionEvent_Transaction {
  return {
    type: "",
    nonce: "",
    gasPrice: "",
    gas: "",
    value: "",
    input: "",
    v: "",
    r: "",
    s: "",
    to: "",
    hash: "",
    from: "",
    maxFeePerGas: "",
    maxPriorityFeePerGas: "",
  };
}

export const TransactionEvent_Transaction: MessageFns<TransactionEvent_Transaction> = {
  encode(message: TransactionEvent_Transaction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.nonce !== "") {
      writer.uint32(18).string(message.nonce);
    }
    if (message.gasPrice !== "") {
      writer.uint32(26).string(message.gasPrice);
    }
    if (message.gas !== "") {
      writer.uint32(34).string(message.gas);
    }
    if (message.value !== "") {
      writer.uint32(42).string(message.value);
    }
    if (message.input !== "") {
      writer.uint32(50).string(message.input);
    }
    if (message.v !== "") {
      writer.uint32(58).string(message.v);
    }
    if (message.r !== "") {
      writer.uint32(66).string(message.r);
    }
    if (message.s !== "") {
      writer.uint32(74).string(message.s);
    }
    if (message.to !== "") {
      writer.uint32(82).string(message.to);
    }
    if (message.hash !== "") {
      writer.uint32(90).string(message.hash);
    }
    if (message.from !== "") {
      writer.uint32(98).string(message.from);
    }
    if (message.maxFeePerGas !== "") {
      writer.uint32(106).string(message.maxFeePerGas);
    }
    if (message.maxPriorityFeePerGas !== "") {
      writer.uint32(114).string(message.maxPriorityFeePerGas);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TransactionEvent_Transaction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionEvent_Transaction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nonce = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.gasPrice = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.gas = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.value = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.input = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.v = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.r = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.s = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.to = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.hash = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.from = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.maxFeePerGas = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.maxPriorityFeePerGas = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionEvent_Transaction {
    return {
      type: isSet(object.type) ? gt.String(object.type) : "",
      nonce: isSet(object.nonce) ? gt.String(object.nonce) : "",
      gasPrice: isSet(object.gasPrice) ? gt.String(object.gasPrice) : "",
      gas: isSet(object.gas) ? gt.String(object.gas) : "",
      value: isSet(object.value) ? gt.String(object.value) : "",
      input: isSet(object.input) ? gt.String(object.input) : "",
      v: isSet(object.v) ? gt.String(object.v) : "",
      r: isSet(object.r) ? gt.String(object.r) : "",
      s: isSet(object.s) ? gt.String(object.s) : "",
      to: isSet(object.to) ? gt.String(object.to) : "",
      hash: isSet(object.hash) ? gt.String(object.hash) : "",
      from: isSet(object.from) ? gt.String(object.from) : "",
      maxFeePerGas: isSet(object.maxFeePerGas) ? gt.String(object.maxFeePerGas) : "",
      maxPriorityFeePerGas: isSet(object.maxPriorityFeePerGas) ? gt.String(object.maxPriorityFeePerGas) : "",
    };
  },

  toJSON(message: TransactionEvent_Transaction): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.nonce !== "") {
      obj.nonce = message.nonce;
    }
    if (message.gasPrice !== "") {
      obj.gasPrice = message.gasPrice;
    }
    if (message.gas !== "") {
      obj.gas = message.gas;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.input !== "") {
      obj.input = message.input;
    }
    if (message.v !== "") {
      obj.v = message.v;
    }
    if (message.r !== "") {
      obj.r = message.r;
    }
    if (message.s !== "") {
      obj.s = message.s;
    }
    if (message.to !== "") {
      obj.to = message.to;
    }
    if (message.hash !== "") {
      obj.hash = message.hash;
    }
    if (message.from !== "") {
      obj.from = message.from;
    }
    if (message.maxFeePerGas !== "") {
      obj.maxFeePerGas = message.maxFeePerGas;
    }
    if (message.maxPriorityFeePerGas !== "") {
      obj.maxPriorityFeePerGas = message.maxPriorityFeePerGas;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransactionEvent_Transaction>, I>>(base?: I): TransactionEvent_Transaction {
    return TransactionEvent_Transaction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransactionEvent_Transaction>, I>>(object: I): TransactionEvent_Transaction {
    const message = createBaseTransactionEvent_Transaction();
    message.type = object.type ?? "";
    message.nonce = object.nonce ?? "";
    message.gasPrice = object.gasPrice ?? "";
    message.gas = object.gas ?? "";
    message.value = object.value ?? "";
    message.input = object.input ?? "";
    message.v = object.v ?? "";
    message.r = object.r ?? "";
    message.s = object.s ?? "";
    message.to = object.to ?? "";
    message.hash = object.hash ?? "";
    message.from = object.from ?? "";
    message.maxFeePerGas = object.maxFeePerGas ?? "";
    message.maxPriorityFeePerGas = object.maxPriorityFeePerGas ?? "";
    return message;
  },
};

function createBaseTransactionEvent_AddressesEntry(): TransactionEvent_AddressesEntry {
  return { key: "", value: false };
}

export const TransactionEvent_AddressesEntry: MessageFns<TransactionEvent_AddressesEntry> = {
  encode(message: TransactionEvent_AddressesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== false) {
      writer.uint32(16).bool(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TransactionEvent_AddressesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionEvent_AddressesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.value = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionEvent_AddressesEntry {
    return {
      key: isSet(object.key) ? gt.String(object.key) : "",
      value: isSet(object.value) ? gt.Boolean(object.value) : false,
    };
  },

  toJSON(message: TransactionEvent_AddressesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== false) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransactionEvent_AddressesEntry>, I>>(base?: I): TransactionEvent_AddressesEntry {
    return TransactionEvent_AddressesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransactionEvent_AddressesEntry>, I>>(
    object: I,
  ): TransactionEvent_AddressesEntry {
    const message = createBaseTransactionEvent_AddressesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? false;
    return message;
  },
};

function createBaseTransactionEvent_TxAddressesEntry(): TransactionEvent_TxAddressesEntry {
  return { key: "", value: false };
}

export const TransactionEvent_TxAddressesEntry: MessageFns<TransactionEvent_TxAddressesEntry> = {
  encode(message: TransactionEvent_TxAddressesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== false) {
      writer.uint32(16).bool(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TransactionEvent_TxAddressesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionEvent_TxAddressesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.value = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionEvent_TxAddressesEntry {
    return {
      key: isSet(object.key) ? gt.String(object.key) : "",
      value: isSet(object.value) ? gt.Boolean(object.value) : false,
    };
  },

  toJSON(message: TransactionEvent_TxAddressesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== false) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransactionEvent_TxAddressesEntry>, I>>(
    base?: I,
  ): TransactionEvent_TxAddressesEntry {
    return TransactionEvent_TxAddressesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransactionEvent_TxAddressesEntry>, I>>(
    object: I,
  ): TransactionEvent_TxAddressesEntry {
    const message = createBaseTransactionEvent_TxAddressesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? false;
    return message;
  },
};

function createBaseBigInt(): BigInt {
  return { bytes: new Uint8Array(0) };
}

export const BigInt: MessageFns<BigInt> = {
  encode(message: BigInt, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bytes.length !== 0) {
      writer.uint32(10).bytes(message.bytes);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigInt {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigInt();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.bytes = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigInt {
    return { bytes: isSet(object.bytes) ? bytesFromBase64(object.bytes) : new Uint8Array(0) };
  },

  toJSON(message: BigInt): unknown {
    const obj: any = {};
    if (message.bytes.length !== 0) {
      obj.bytes = base64FromBytes(message.bytes);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BigInt>, I>>(base?: I): BigInt {
    return BigInt.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BigInt>, I>>(object: I): BigInt {
    const message = createBaseBigInt();
    message.bytes = object.bytes ?? new Uint8Array(0);
    return message;
  },
};

function createBaseTransactionLog(): TransactionLog {
  return {
    address: "",
    topics: [],
    data: "",
    blockNumber: "",
    transactionHash: "",
    transactionIndex: "",
    blockHash: "",
    logIndex: "",
    removed: false,
  };
}

export const TransactionLog: MessageFns<TransactionLog> = {
  encode(message: TransactionLog, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    for (const v of message.topics) {
      writer.uint32(18).string(v!);
    }
    if (message.data !== "") {
      writer.uint32(26).string(message.data);
    }
    if (message.blockNumber !== "") {
      writer.uint32(34).string(message.blockNumber);
    }
    if (message.transactionHash !== "") {
      writer.uint32(42).string(message.transactionHash);
    }
    if (message.transactionIndex !== "") {
      writer.uint32(50).string(message.transactionIndex);
    }
    if (message.blockHash !== "") {
      writer.uint32(58).string(message.blockHash);
    }
    if (message.logIndex !== "") {
      writer.uint32(66).string(message.logIndex);
    }
    if (message.removed !== false) {
      writer.uint32(72).bool(message.removed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TransactionLog {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionLog();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.topics.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.blockNumber = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.transactionHash = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.transactionIndex = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.blockHash = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.logIndex = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.removed = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionLog {
    return {
      address: isSet(object.address) ? gt.String(object.address) : "",
      topics: gt.Array.isArray(object?.topics) ? object.topics.map((e: any) => gt.String(e)) : [],
      data: isSet(object.data) ? gt.String(object.data) : "",
      blockNumber: isSet(object.blockNumber) ? gt.String(object.blockNumber) : "",
      transactionHash: isSet(object.transactionHash) ? gt.String(object.transactionHash) : "",
      transactionIndex: isSet(object.transactionIndex) ? gt.String(object.transactionIndex) : "",
      blockHash: isSet(object.blockHash) ? gt.String(object.blockHash) : "",
      logIndex: isSet(object.logIndex) ? gt.String(object.logIndex) : "",
      removed: isSet(object.removed) ? gt.Boolean(object.removed) : false,
    };
  },

  toJSON(message: TransactionLog): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.topics?.length) {
      obj.topics = message.topics;
    }
    if (message.data !== "") {
      obj.data = message.data;
    }
    if (message.blockNumber !== "") {
      obj.blockNumber = message.blockNumber;
    }
    if (message.transactionHash !== "") {
      obj.transactionHash = message.transactionHash;
    }
    if (message.transactionIndex !== "") {
      obj.transactionIndex = message.transactionIndex;
    }
    if (message.blockHash !== "") {
      obj.blockHash = message.blockHash;
    }
    if (message.logIndex !== "") {
      obj.logIndex = message.logIndex;
    }
    if (message.removed !== false) {
      obj.removed = message.removed;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransactionLog>, I>>(base?: I): TransactionLog {
    return TransactionLog.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransactionLog>, I>>(object: I): TransactionLog {
    const message = createBaseTransactionLog();
    message.address = object.address ?? "";
    message.topics = object.topics?.map((e) => e) || [];
    message.data = object.data ?? "";
    message.blockNumber = object.blockNumber ?? "";
    message.transactionHash = object.transactionHash ?? "";
    message.transactionIndex = object.transactionIndex ?? "";
    message.blockHash = object.blockHash ?? "";
    message.logIndex = object.logIndex ?? "";
    message.removed = object.removed ?? false;
    return message;
  },
};

function createBaseTransactionReceipt(): TransactionReceipt {
  return {
    blobGasUsed: undefined,
    blockHash: "",
    blockNumber: 0,
    contractAddress: undefined,
    cumulativeGasUsed: undefined,
    effectiveGasPrice: undefined,
    from: "",
    gasUsed: undefined,
    logs: [],
    logsBloom: "",
    root: undefined,
    status: "",
    to: "",
    transactionHash: "",
    transactionIndex: 0,
    type: "",
  };
}

export const TransactionReceipt: MessageFns<TransactionReceipt> = {
  encode(message: TransactionReceipt, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blobGasUsed !== undefined) {
      BigInt.encode(message.blobGasUsed, writer.uint32(10).fork()).join();
    }
    if (message.blockHash !== "") {
      writer.uint32(18).string(message.blockHash);
    }
    if (message.blockNumber !== 0) {
      writer.uint32(24).uint64(message.blockNumber);
    }
    if (message.contractAddress !== undefined) {
      writer.uint32(34).string(message.contractAddress);
    }
    if (message.cumulativeGasUsed !== undefined) {
      BigInt.encode(message.cumulativeGasUsed, writer.uint32(42).fork()).join();
    }
    if (message.effectiveGasPrice !== undefined) {
      BigInt.encode(message.effectiveGasPrice, writer.uint32(50).fork()).join();
    }
    if (message.from !== "") {
      writer.uint32(58).string(message.from);
    }
    if (message.gasUsed !== undefined) {
      BigInt.encode(message.gasUsed, writer.uint32(66).fork()).join();
    }
    for (const v of message.logs) {
      TransactionLog.encode(v!, writer.uint32(74).fork()).join();
    }
    if (message.logsBloom !== "") {
      writer.uint32(82).string(message.logsBloom);
    }
    if (message.root !== undefined) {
      writer.uint32(90).string(message.root);
    }
    if (message.status !== "") {
      writer.uint32(98).string(message.status);
    }
    if (message.to !== "") {
      writer.uint32(106).string(message.to);
    }
    if (message.transactionHash !== "") {
      writer.uint32(114).string(message.transactionHash);
    }
    if (message.transactionIndex !== 0) {
      writer.uint32(120).uint64(message.transactionIndex);
    }
    if (message.type !== "") {
      writer.uint32(130).string(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TransactionReceipt {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionReceipt();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.blobGasUsed = BigInt.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.blockHash = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.blockNumber = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.contractAddress = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.cumulativeGasUsed = BigInt.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.effectiveGasPrice = BigInt.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.from = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.gasUsed = BigInt.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.logs.push(TransactionLog.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.logsBloom = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.root = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.to = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.transactionHash = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.transactionIndex = longToNumber(reader.uint64());
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.type = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionReceipt {
    return {
      blobGasUsed: isSet(object.blobGasUsed) ? BigInt.fromJSON(object.blobGasUsed) : undefined,
      blockHash: isSet(object.blockHash) ? gt.String(object.blockHash) : "",
      blockNumber: isSet(object.blockNumber) ? gt.Number(object.blockNumber) : 0,
      contractAddress: isSet(object.contractAddress) ? gt.String(object.contractAddress) : undefined,
      cumulativeGasUsed: isSet(object.cumulativeGasUsed) ? BigInt.fromJSON(object.cumulativeGasUsed) : undefined,
      effectiveGasPrice: isSet(object.effectiveGasPrice) ? BigInt.fromJSON(object.effectiveGasPrice) : undefined,
      from: isSet(object.from) ? gt.String(object.from) : "",
      gasUsed: isSet(object.gasUsed) ? BigInt.fromJSON(object.gasUsed) : undefined,
      logs: gt.Array.isArray(object?.logs) ? object.logs.map((e: any) => TransactionLog.fromJSON(e)) : [],
      logsBloom: isSet(object.logsBloom) ? gt.String(object.logsBloom) : "",
      root: isSet(object.root) ? gt.String(object.root) : undefined,
      status: isSet(object.status) ? gt.String(object.status) : "",
      to: isSet(object.to) ? gt.String(object.to) : "",
      transactionHash: isSet(object.transactionHash) ? gt.String(object.transactionHash) : "",
      transactionIndex: isSet(object.transactionIndex) ? gt.Number(object.transactionIndex) : 0,
      type: isSet(object.type) ? gt.String(object.type) : "",
    };
  },

  toJSON(message: TransactionReceipt): unknown {
    const obj: any = {};
    if (message.blobGasUsed !== undefined) {
      obj.blobGasUsed = BigInt.toJSON(message.blobGasUsed);
    }
    if (message.blockHash !== "") {
      obj.blockHash = message.blockHash;
    }
    if (message.blockNumber !== 0) {
      obj.blockNumber = Math.round(message.blockNumber);
    }
    if (message.contractAddress !== undefined) {
      obj.contractAddress = message.contractAddress;
    }
    if (message.cumulativeGasUsed !== undefined) {
      obj.cumulativeGasUsed = BigInt.toJSON(message.cumulativeGasUsed);
    }
    if (message.effectiveGasPrice !== undefined) {
      obj.effectiveGasPrice = BigInt.toJSON(message.effectiveGasPrice);
    }
    if (message.from !== "") {
      obj.from = message.from;
    }
    if (message.gasUsed !== undefined) {
      obj.gasUsed = BigInt.toJSON(message.gasUsed);
    }
    if (message.logs?.length) {
      obj.logs = message.logs.map((e) => TransactionLog.toJSON(e));
    }
    if (message.logsBloom !== "") {
      obj.logsBloom = message.logsBloom;
    }
    if (message.root !== undefined) {
      obj.root = message.root;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.to !== "") {
      obj.to = message.to;
    }
    if (message.transactionHash !== "") {
      obj.transactionHash = message.transactionHash;
    }
    if (message.transactionIndex !== 0) {
      obj.transactionIndex = Math.round(message.transactionIndex);
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransactionReceipt>, I>>(base?: I): TransactionReceipt {
    return TransactionReceipt.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransactionReceipt>, I>>(object: I): TransactionReceipt {
    const message = createBaseTransactionReceipt();
    message.blobGasUsed = (object.blobGasUsed !== undefined && object.blobGasUsed !== null)
      ? BigInt.fromPartial(object.blobGasUsed)
      : undefined;
    message.blockHash = object.blockHash ?? "";
    message.blockNumber = object.blockNumber ?? 0;
    message.contractAddress = object.contractAddress ?? undefined;
    message.cumulativeGasUsed = (object.cumulativeGasUsed !== undefined && object.cumulativeGasUsed !== null)
      ? BigInt.fromPartial(object.cumulativeGasUsed)
      : undefined;
    message.effectiveGasPrice = (object.effectiveGasPrice !== undefined && object.effectiveGasPrice !== null)
      ? BigInt.fromPartial(object.effectiveGasPrice)
      : undefined;
    message.from = object.from ?? "";
    message.gasUsed = (object.gasUsed !== undefined && object.gasUsed !== null)
      ? BigInt.fromPartial(object.gasUsed)
      : undefined;
    message.logs = object.logs?.map((e) => TransactionLog.fromPartial(e)) || [];
    message.logsBloom = object.logsBloom ?? "";
    message.root = object.root ?? undefined;
    message.status = object.status ?? "";
    message.to = object.to ?? "";
    message.transactionHash = object.transactionHash ?? "";
    message.transactionIndex = object.transactionIndex ?? 0;
    message.type = object.type ?? "";
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

function bytesFromBase64(b64: string): Uint8Array {
  if ((gt as any).Buffer) {
    return Uint8Array.from(gt.Buffer.from(b64, "base64"));
  } else {
    const bin = gt.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((gt as any).Buffer) {
    return gt.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(gt.String.fromCharCode(byte));
    });
    return gt.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = gt.Number(int64.toString());
  if (num > gt.Number.MAX_SAFE_INTEGER) {
    throw new gt.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < gt.Number.MIN_SAFE_INTEGER) {
    throw new gt.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
