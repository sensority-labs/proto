"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: model/v1/events.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionReceipt = exports.TransactionLog = exports.BigInt = exports.TransactionEvent_TxAddressesEntry = exports.TransactionEvent_AddressesEntry = exports.TransactionEvent_Transaction = exports.TransactionEvent_Block = exports.TransactionEvent_Network = exports.TransactionEvent = exports.BlockEvent_Block = exports.BlockEvent_Network = exports.BlockEvent = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "model.v1";
function createBaseBlockEvent() {
    return { blockHash: "", blockNumber: "", network: undefined, block: undefined };
}
exports.BlockEvent = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.blockHash !== "") {
            writer.uint32(10).string(message.blockHash);
        }
        if (message.blockNumber !== "") {
            writer.uint32(18).string(message.blockNumber);
        }
        if (message.network !== undefined) {
            exports.BlockEvent_Network.encode(message.network, writer.uint32(26).fork()).join();
        }
        if (message.block !== undefined) {
            exports.BlockEvent_Block.encode(message.block, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.blockHash = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.blockNumber = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.network = exports.BlockEvent_Network.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.block = exports.BlockEvent_Block.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            blockHash: isSet(object.blockHash) ? gt.String(object.blockHash) : "",
            blockNumber: isSet(object.blockNumber) ? gt.String(object.blockNumber) : "",
            network: isSet(object.network) ? exports.BlockEvent_Network.fromJSON(object.network) : undefined,
            block: isSet(object.block) ? exports.BlockEvent_Block.fromJSON(object.block) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.blockHash !== "") {
            obj.blockHash = message.blockHash;
        }
        if (message.blockNumber !== "") {
            obj.blockNumber = message.blockNumber;
        }
        if (message.network !== undefined) {
            obj.network = exports.BlockEvent_Network.toJSON(message.network);
        }
        if (message.block !== undefined) {
            obj.block = exports.BlockEvent_Block.toJSON(message.block);
        }
        return obj;
    },
    create(base) {
        return exports.BlockEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseBlockEvent();
        message.blockHash = (_a = object.blockHash) !== null && _a !== void 0 ? _a : "";
        message.blockNumber = (_b = object.blockNumber) !== null && _b !== void 0 ? _b : "";
        message.network = (object.network !== undefined && object.network !== null)
            ? exports.BlockEvent_Network.fromPartial(object.network)
            : undefined;
        message.block = (object.block !== undefined && object.block !== null)
            ? exports.BlockEvent_Block.fromPartial(object.block)
            : undefined;
        return message;
    },
};
function createBaseBlockEvent_Network() {
    return { chainId: "" };
}
exports.BlockEvent_Network = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.chainId !== "") {
            writer.uint32(10).string(message.chainId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockEvent_Network();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.chainId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { chainId: isSet(object.chainId) ? gt.String(object.chainId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.chainId !== "") {
            obj.chainId = message.chainId;
        }
        return obj;
    },
    create(base) {
        return exports.BlockEvent_Network.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseBlockEvent_Network();
        message.chainId = (_a = object.chainId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseBlockEvent_Block() {
    return {
        difficulty: "",
        extraData: "",
        gasLimit: "",
        gasUsed: "",
        hash: "",
        logsBloom: "",
        miner: "",
        mixHash: "",
        nonce: "",
        number: "",
        parentHash: "",
        receiptsRoot: "",
        sha3Uncles: "",
        size: "",
        stateRoot: "",
        timestamp: "",
        totalDifficulty: "",
        transactions: [],
        transactionsRoot: "",
        uncles: [],
        baseFeePerGas: "",
    };
}
exports.BlockEvent_Block = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.difficulty !== "") {
            writer.uint32(10).string(message.difficulty);
        }
        if (message.extraData !== "") {
            writer.uint32(18).string(message.extraData);
        }
        if (message.gasLimit !== "") {
            writer.uint32(26).string(message.gasLimit);
        }
        if (message.gasUsed !== "") {
            writer.uint32(34).string(message.gasUsed);
        }
        if (message.hash !== "") {
            writer.uint32(42).string(message.hash);
        }
        if (message.logsBloom !== "") {
            writer.uint32(50).string(message.logsBloom);
        }
        if (message.miner !== "") {
            writer.uint32(58).string(message.miner);
        }
        if (message.mixHash !== "") {
            writer.uint32(66).string(message.mixHash);
        }
        if (message.nonce !== "") {
            writer.uint32(74).string(message.nonce);
        }
        if (message.number !== "") {
            writer.uint32(82).string(message.number);
        }
        if (message.parentHash !== "") {
            writer.uint32(90).string(message.parentHash);
        }
        if (message.receiptsRoot !== "") {
            writer.uint32(98).string(message.receiptsRoot);
        }
        if (message.sha3Uncles !== "") {
            writer.uint32(106).string(message.sha3Uncles);
        }
        if (message.size !== "") {
            writer.uint32(114).string(message.size);
        }
        if (message.stateRoot !== "") {
            writer.uint32(122).string(message.stateRoot);
        }
        if (message.timestamp !== "") {
            writer.uint32(130).string(message.timestamp);
        }
        if (message.totalDifficulty !== "") {
            writer.uint32(138).string(message.totalDifficulty);
        }
        for (const v of message.transactions) {
            writer.uint32(146).string(v);
        }
        if (message.transactionsRoot !== "") {
            writer.uint32(154).string(message.transactionsRoot);
        }
        for (const v of message.uncles) {
            writer.uint32(162).string(v);
        }
        if (message.baseFeePerGas !== "") {
            writer.uint32(170).string(message.baseFeePerGas);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockEvent_Block();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.difficulty = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.extraData = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.gasLimit = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.gasUsed = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.hash = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.logsBloom = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.miner = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.mixHash = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.nonce = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.number = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.parentHash = reader.string();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.receiptsRoot = reader.string();
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.sha3Uncles = reader.string();
                    continue;
                }
                case 14: {
                    if (tag !== 114) {
                        break;
                    }
                    message.size = reader.string();
                    continue;
                }
                case 15: {
                    if (tag !== 122) {
                        break;
                    }
                    message.stateRoot = reader.string();
                    continue;
                }
                case 16: {
                    if (tag !== 130) {
                        break;
                    }
                    message.timestamp = reader.string();
                    continue;
                }
                case 17: {
                    if (tag !== 138) {
                        break;
                    }
                    message.totalDifficulty = reader.string();
                    continue;
                }
                case 18: {
                    if (tag !== 146) {
                        break;
                    }
                    message.transactions.push(reader.string());
                    continue;
                }
                case 19: {
                    if (tag !== 154) {
                        break;
                    }
                    message.transactionsRoot = reader.string();
                    continue;
                }
                case 20: {
                    if (tag !== 162) {
                        break;
                    }
                    message.uncles.push(reader.string());
                    continue;
                }
                case 21: {
                    if (tag !== 170) {
                        break;
                    }
                    message.baseFeePerGas = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            difficulty: isSet(object.difficulty) ? gt.String(object.difficulty) : "",
            extraData: isSet(object.extraData) ? gt.String(object.extraData) : "",
            gasLimit: isSet(object.gasLimit) ? gt.String(object.gasLimit) : "",
            gasUsed: isSet(object.gasUsed) ? gt.String(object.gasUsed) : "",
            hash: isSet(object.hash) ? gt.String(object.hash) : "",
            logsBloom: isSet(object.logsBloom) ? gt.String(object.logsBloom) : "",
            miner: isSet(object.miner) ? gt.String(object.miner) : "",
            mixHash: isSet(object.mixHash) ? gt.String(object.mixHash) : "",
            nonce: isSet(object.nonce) ? gt.String(object.nonce) : "",
            number: isSet(object.number) ? gt.String(object.number) : "",
            parentHash: isSet(object.parentHash) ? gt.String(object.parentHash) : "",
            receiptsRoot: isSet(object.receiptsRoot) ? gt.String(object.receiptsRoot) : "",
            sha3Uncles: isSet(object.sha3Uncles) ? gt.String(object.sha3Uncles) : "",
            size: isSet(object.size) ? gt.String(object.size) : "",
            stateRoot: isSet(object.stateRoot) ? gt.String(object.stateRoot) : "",
            timestamp: isSet(object.timestamp) ? gt.String(object.timestamp) : "",
            totalDifficulty: isSet(object.totalDifficulty) ? gt.String(object.totalDifficulty) : "",
            transactions: gt.Array.isArray(object === null || object === void 0 ? void 0 : object.transactions) ? object.transactions.map((e) => gt.String(e)) : [],
            transactionsRoot: isSet(object.transactionsRoot) ? gt.String(object.transactionsRoot) : "",
            uncles: gt.Array.isArray(object === null || object === void 0 ? void 0 : object.uncles) ? object.uncles.map((e) => gt.String(e)) : [],
            baseFeePerGas: isSet(object.baseFeePerGas) ? gt.String(object.baseFeePerGas) : "",
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.difficulty !== "") {
            obj.difficulty = message.difficulty;
        }
        if (message.extraData !== "") {
            obj.extraData = message.extraData;
        }
        if (message.gasLimit !== "") {
            obj.gasLimit = message.gasLimit;
        }
        if (message.gasUsed !== "") {
            obj.gasUsed = message.gasUsed;
        }
        if (message.hash !== "") {
            obj.hash = message.hash;
        }
        if (message.logsBloom !== "") {
            obj.logsBloom = message.logsBloom;
        }
        if (message.miner !== "") {
            obj.miner = message.miner;
        }
        if (message.mixHash !== "") {
            obj.mixHash = message.mixHash;
        }
        if (message.nonce !== "") {
            obj.nonce = message.nonce;
        }
        if (message.number !== "") {
            obj.number = message.number;
        }
        if (message.parentHash !== "") {
            obj.parentHash = message.parentHash;
        }
        if (message.receiptsRoot !== "") {
            obj.receiptsRoot = message.receiptsRoot;
        }
        if (message.sha3Uncles !== "") {
            obj.sha3Uncles = message.sha3Uncles;
        }
        if (message.size !== "") {
            obj.size = message.size;
        }
        if (message.stateRoot !== "") {
            obj.stateRoot = message.stateRoot;
        }
        if (message.timestamp !== "") {
            obj.timestamp = message.timestamp;
        }
        if (message.totalDifficulty !== "") {
            obj.totalDifficulty = message.totalDifficulty;
        }
        if ((_a = message.transactions) === null || _a === void 0 ? void 0 : _a.length) {
            obj.transactions = message.transactions;
        }
        if (message.transactionsRoot !== "") {
            obj.transactionsRoot = message.transactionsRoot;
        }
        if ((_b = message.uncles) === null || _b === void 0 ? void 0 : _b.length) {
            obj.uncles = message.uncles;
        }
        if (message.baseFeePerGas !== "") {
            obj.baseFeePerGas = message.baseFeePerGas;
        }
        return obj;
    },
    create(base) {
        return exports.BlockEvent_Block.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w;
        const message = createBaseBlockEvent_Block();
        message.difficulty = (_a = object.difficulty) !== null && _a !== void 0 ? _a : "";
        message.extraData = (_b = object.extraData) !== null && _b !== void 0 ? _b : "";
        message.gasLimit = (_c = object.gasLimit) !== null && _c !== void 0 ? _c : "";
        message.gasUsed = (_d = object.gasUsed) !== null && _d !== void 0 ? _d : "";
        message.hash = (_e = object.hash) !== null && _e !== void 0 ? _e : "";
        message.logsBloom = (_f = object.logsBloom) !== null && _f !== void 0 ? _f : "";
        message.miner = (_g = object.miner) !== null && _g !== void 0 ? _g : "";
        message.mixHash = (_h = object.mixHash) !== null && _h !== void 0 ? _h : "";
        message.nonce = (_j = object.nonce) !== null && _j !== void 0 ? _j : "";
        message.number = (_k = object.number) !== null && _k !== void 0 ? _k : "";
        message.parentHash = (_l = object.parentHash) !== null && _l !== void 0 ? _l : "";
        message.receiptsRoot = (_m = object.receiptsRoot) !== null && _m !== void 0 ? _m : "";
        message.sha3Uncles = (_o = object.sha3Uncles) !== null && _o !== void 0 ? _o : "";
        message.size = (_p = object.size) !== null && _p !== void 0 ? _p : "";
        message.stateRoot = (_q = object.stateRoot) !== null && _q !== void 0 ? _q : "";
        message.timestamp = (_r = object.timestamp) !== null && _r !== void 0 ? _r : "";
        message.totalDifficulty = (_s = object.totalDifficulty) !== null && _s !== void 0 ? _s : "";
        message.transactions = ((_t = object.transactions) === null || _t === void 0 ? void 0 : _t.map((e) => e)) || [];
        message.transactionsRoot = (_u = object.transactionsRoot) !== null && _u !== void 0 ? _u : "";
        message.uncles = ((_v = object.uncles) === null || _v === void 0 ? void 0 : _v.map((e) => e)) || [];
        message.baseFeePerGas = (_w = object.baseFeePerGas) !== null && _w !== void 0 ? _w : "";
        return message;
    },
};
function createBaseTransactionEvent() {
    return {
        transaction: undefined,
        network: undefined,
        addresses: {},
        block: undefined,
        isContractDeployment: false,
        contractAddress: "",
        txAddresses: {},
        receipt: undefined,
    };
}
exports.TransactionEvent = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.transaction !== undefined) {
            exports.TransactionEvent_Transaction.encode(message.transaction, writer.uint32(10).fork()).join();
        }
        if (message.network !== undefined) {
            exports.TransactionEvent_Network.encode(message.network, writer.uint32(18).fork()).join();
        }
        Object.entries(message.addresses).forEach(([key, value]) => {
            exports.TransactionEvent_AddressesEntry.encode({ key: key, value }, writer.uint32(26).fork()).join();
        });
        if (message.block !== undefined) {
            exports.TransactionEvent_Block.encode(message.block, writer.uint32(34).fork()).join();
        }
        if (message.isContractDeployment !== false) {
            writer.uint32(40).bool(message.isContractDeployment);
        }
        if (message.contractAddress !== "") {
            writer.uint32(50).string(message.contractAddress);
        }
        Object.entries(message.txAddresses).forEach(([key, value]) => {
            exports.TransactionEvent_TxAddressesEntry.encode({ key: key, value }, writer.uint32(58).fork()).join();
        });
        if (message.receipt !== undefined) {
            exports.TransactionReceipt.encode(message.receipt, writer.uint32(66).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTransactionEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.transaction = exports.TransactionEvent_Transaction.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.network = exports.TransactionEvent_Network.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    const entry3 = exports.TransactionEvent_AddressesEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.addresses[entry3.key] = entry3.value;
                    }
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.block = exports.TransactionEvent_Block.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.isContractDeployment = reader.bool();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.contractAddress = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    const entry7 = exports.TransactionEvent_TxAddressesEntry.decode(reader, reader.uint32());
                    if (entry7.value !== undefined) {
                        message.txAddresses[entry7.key] = entry7.value;
                    }
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.receipt = exports.TransactionReceipt.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            transaction: isSet(object.transaction) ? exports.TransactionEvent_Transaction.fromJSON(object.transaction) : undefined,
            network: isSet(object.network) ? exports.TransactionEvent_Network.fromJSON(object.network) : undefined,
            addresses: isObject(object.addresses)
                ? Object.entries(object.addresses).reduce((acc, [key, value]) => {
                    acc[key] = Boolean(value);
                    return acc;
                }, {})
                : {},
            block: isSet(object.block) ? exports.TransactionEvent_Block.fromJSON(object.block) : undefined,
            isContractDeployment: isSet(object.isContractDeployment) ? gt.Boolean(object.isContractDeployment) : false,
            contractAddress: isSet(object.contractAddress) ? gt.String(object.contractAddress) : "",
            txAddresses: isObject(object.txAddresses)
                ? Object.entries(object.txAddresses).reduce((acc, [key, value]) => {
                    acc[key] = Boolean(value);
                    return acc;
                }, {})
                : {},
            receipt: isSet(object.receipt) ? exports.TransactionReceipt.fromJSON(object.receipt) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.transaction !== undefined) {
            obj.transaction = exports.TransactionEvent_Transaction.toJSON(message.transaction);
        }
        if (message.network !== undefined) {
            obj.network = exports.TransactionEvent_Network.toJSON(message.network);
        }
        if (message.addresses) {
            const entries = Object.entries(message.addresses);
            if (entries.length > 0) {
                obj.addresses = {};
                entries.forEach(([k, v]) => {
                    obj.addresses[k] = v;
                });
            }
        }
        if (message.block !== undefined) {
            obj.block = exports.TransactionEvent_Block.toJSON(message.block);
        }
        if (message.isContractDeployment !== false) {
            obj.isContractDeployment = message.isContractDeployment;
        }
        if (message.contractAddress !== "") {
            obj.contractAddress = message.contractAddress;
        }
        if (message.txAddresses) {
            const entries = Object.entries(message.txAddresses);
            if (entries.length > 0) {
                obj.txAddresses = {};
                entries.forEach(([k, v]) => {
                    obj.txAddresses[k] = v;
                });
            }
        }
        if (message.receipt !== undefined) {
            obj.receipt = exports.TransactionReceipt.toJSON(message.receipt);
        }
        return obj;
    },
    create(base) {
        return exports.TransactionEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseTransactionEvent();
        message.transaction = (object.transaction !== undefined && object.transaction !== null)
            ? exports.TransactionEvent_Transaction.fromPartial(object.transaction)
            : undefined;
        message.network = (object.network !== undefined && object.network !== null)
            ? exports.TransactionEvent_Network.fromPartial(object.network)
            : undefined;
        message.addresses = Object.entries((_a = object.addresses) !== null && _a !== void 0 ? _a : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = gt.Boolean(value);
            }
            return acc;
        }, {});
        message.block = (object.block !== undefined && object.block !== null)
            ? exports.TransactionEvent_Block.fromPartial(object.block)
            : undefined;
        message.isContractDeployment = (_b = object.isContractDeployment) !== null && _b !== void 0 ? _b : false;
        message.contractAddress = (_c = object.contractAddress) !== null && _c !== void 0 ? _c : "";
        message.txAddresses = Object.entries((_d = object.txAddresses) !== null && _d !== void 0 ? _d : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = gt.Boolean(value);
            }
            return acc;
        }, {});
        message.receipt = (object.receipt !== undefined && object.receipt !== null)
            ? exports.TransactionReceipt.fromPartial(object.receipt)
            : undefined;
        return message;
    },
};
function createBaseTransactionEvent_Network() {
    return { chainId: "" };
}
exports.TransactionEvent_Network = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.chainId !== "") {
            writer.uint32(10).string(message.chainId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTransactionEvent_Network();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.chainId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { chainId: isSet(object.chainId) ? gt.String(object.chainId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.chainId !== "") {
            obj.chainId = message.chainId;
        }
        return obj;
    },
    create(base) {
        return exports.TransactionEvent_Network.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseTransactionEvent_Network();
        message.chainId = (_a = object.chainId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseTransactionEvent_Block() {
    return { blockHash: "", blockNumber: "", blockTimestamp: "", baseFeePerGas: "" };
}
exports.TransactionEvent_Block = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.blockHash !== "") {
            writer.uint32(10).string(message.blockHash);
        }
        if (message.blockNumber !== "") {
            writer.uint32(18).string(message.blockNumber);
        }
        if (message.blockTimestamp !== "") {
            writer.uint32(26).string(message.blockTimestamp);
        }
        if (message.baseFeePerGas !== "") {
            writer.uint32(34).string(message.baseFeePerGas);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTransactionEvent_Block();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.blockHash = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.blockNumber = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.blockTimestamp = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.baseFeePerGas = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            blockHash: isSet(object.blockHash) ? gt.String(object.blockHash) : "",
            blockNumber: isSet(object.blockNumber) ? gt.String(object.blockNumber) : "",
            blockTimestamp: isSet(object.blockTimestamp) ? gt.String(object.blockTimestamp) : "",
            baseFeePerGas: isSet(object.baseFeePerGas) ? gt.String(object.baseFeePerGas) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.blockHash !== "") {
            obj.blockHash = message.blockHash;
        }
        if (message.blockNumber !== "") {
            obj.blockNumber = message.blockNumber;
        }
        if (message.blockTimestamp !== "") {
            obj.blockTimestamp = message.blockTimestamp;
        }
        if (message.baseFeePerGas !== "") {
            obj.baseFeePerGas = message.baseFeePerGas;
        }
        return obj;
    },
    create(base) {
        return exports.TransactionEvent_Block.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseTransactionEvent_Block();
        message.blockHash = (_a = object.blockHash) !== null && _a !== void 0 ? _a : "";
        message.blockNumber = (_b = object.blockNumber) !== null && _b !== void 0 ? _b : "";
        message.blockTimestamp = (_c = object.blockTimestamp) !== null && _c !== void 0 ? _c : "";
        message.baseFeePerGas = (_d = object.baseFeePerGas) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseTransactionEvent_Transaction() {
    return {
        type: "",
        nonce: "",
        gasPrice: "",
        gas: "",
        value: "",
        input: "",
        v: "",
        r: "",
        s: "",
        to: "",
        hash: "",
        from: "",
        maxFeePerGas: "",
        maxPriorityFeePerGas: "",
    };
}
exports.TransactionEvent_Transaction = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== "") {
            writer.uint32(10).string(message.type);
        }
        if (message.nonce !== "") {
            writer.uint32(18).string(message.nonce);
        }
        if (message.gasPrice !== "") {
            writer.uint32(26).string(message.gasPrice);
        }
        if (message.gas !== "") {
            writer.uint32(34).string(message.gas);
        }
        if (message.value !== "") {
            writer.uint32(42).string(message.value);
        }
        if (message.input !== "") {
            writer.uint32(50).string(message.input);
        }
        if (message.v !== "") {
            writer.uint32(58).string(message.v);
        }
        if (message.r !== "") {
            writer.uint32(66).string(message.r);
        }
        if (message.s !== "") {
            writer.uint32(74).string(message.s);
        }
        if (message.to !== "") {
            writer.uint32(82).string(message.to);
        }
        if (message.hash !== "") {
            writer.uint32(90).string(message.hash);
        }
        if (message.from !== "") {
            writer.uint32(98).string(message.from);
        }
        if (message.maxFeePerGas !== "") {
            writer.uint32(106).string(message.maxFeePerGas);
        }
        if (message.maxPriorityFeePerGas !== "") {
            writer.uint32(114).string(message.maxPriorityFeePerGas);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTransactionEvent_Transaction();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.nonce = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.gasPrice = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.gas = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.input = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.v = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.r = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.s = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.to = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.hash = reader.string();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.from = reader.string();
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.maxFeePerGas = reader.string();
                    continue;
                }
                case 14: {
                    if (tag !== 114) {
                        break;
                    }
                    message.maxPriorityFeePerGas = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            type: isSet(object.type) ? gt.String(object.type) : "",
            nonce: isSet(object.nonce) ? gt.String(object.nonce) : "",
            gasPrice: isSet(object.gasPrice) ? gt.String(object.gasPrice) : "",
            gas: isSet(object.gas) ? gt.String(object.gas) : "",
            value: isSet(object.value) ? gt.String(object.value) : "",
            input: isSet(object.input) ? gt.String(object.input) : "",
            v: isSet(object.v) ? gt.String(object.v) : "",
            r: isSet(object.r) ? gt.String(object.r) : "",
            s: isSet(object.s) ? gt.String(object.s) : "",
            to: isSet(object.to) ? gt.String(object.to) : "",
            hash: isSet(object.hash) ? gt.String(object.hash) : "",
            from: isSet(object.from) ? gt.String(object.from) : "",
            maxFeePerGas: isSet(object.maxFeePerGas) ? gt.String(object.maxFeePerGas) : "",
            maxPriorityFeePerGas: isSet(object.maxPriorityFeePerGas) ? gt.String(object.maxPriorityFeePerGas) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.type !== "") {
            obj.type = message.type;
        }
        if (message.nonce !== "") {
            obj.nonce = message.nonce;
        }
        if (message.gasPrice !== "") {
            obj.gasPrice = message.gasPrice;
        }
        if (message.gas !== "") {
            obj.gas = message.gas;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        if (message.input !== "") {
            obj.input = message.input;
        }
        if (message.v !== "") {
            obj.v = message.v;
        }
        if (message.r !== "") {
            obj.r = message.r;
        }
        if (message.s !== "") {
            obj.s = message.s;
        }
        if (message.to !== "") {
            obj.to = message.to;
        }
        if (message.hash !== "") {
            obj.hash = message.hash;
        }
        if (message.from !== "") {
            obj.from = message.from;
        }
        if (message.maxFeePerGas !== "") {
            obj.maxFeePerGas = message.maxFeePerGas;
        }
        if (message.maxPriorityFeePerGas !== "") {
            obj.maxPriorityFeePerGas = message.maxPriorityFeePerGas;
        }
        return obj;
    },
    create(base) {
        return exports.TransactionEvent_Transaction.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        const message = createBaseTransactionEvent_Transaction();
        message.type = (_a = object.type) !== null && _a !== void 0 ? _a : "";
        message.nonce = (_b = object.nonce) !== null && _b !== void 0 ? _b : "";
        message.gasPrice = (_c = object.gasPrice) !== null && _c !== void 0 ? _c : "";
        message.gas = (_d = object.gas) !== null && _d !== void 0 ? _d : "";
        message.value = (_e = object.value) !== null && _e !== void 0 ? _e : "";
        message.input = (_f = object.input) !== null && _f !== void 0 ? _f : "";
        message.v = (_g = object.v) !== null && _g !== void 0 ? _g : "";
        message.r = (_h = object.r) !== null && _h !== void 0 ? _h : "";
        message.s = (_j = object.s) !== null && _j !== void 0 ? _j : "";
        message.to = (_k = object.to) !== null && _k !== void 0 ? _k : "";
        message.hash = (_l = object.hash) !== null && _l !== void 0 ? _l : "";
        message.from = (_m = object.from) !== null && _m !== void 0 ? _m : "";
        message.maxFeePerGas = (_o = object.maxFeePerGas) !== null && _o !== void 0 ? _o : "";
        message.maxPriorityFeePerGas = (_p = object.maxPriorityFeePerGas) !== null && _p !== void 0 ? _p : "";
        return message;
    },
};
function createBaseTransactionEvent_AddressesEntry() {
    return { key: "", value: false };
}
exports.TransactionEvent_AddressesEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== false) {
            writer.uint32(16).bool(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTransactionEvent_AddressesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.value = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? gt.String(object.key) : "",
            value: isSet(object.value) ? gt.Boolean(object.value) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== false) {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.TransactionEvent_AddressesEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTransactionEvent_AddressesEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
function createBaseTransactionEvent_TxAddressesEntry() {
    return { key: "", value: false };
}
exports.TransactionEvent_TxAddressesEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== false) {
            writer.uint32(16).bool(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTransactionEvent_TxAddressesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.value = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? gt.String(object.key) : "",
            value: isSet(object.value) ? gt.Boolean(object.value) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== false) {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.TransactionEvent_TxAddressesEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTransactionEvent_TxAddressesEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
function createBaseBigInt() {
    return { bytes: new Uint8Array(0) };
}
exports.BigInt = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.bytes.length !== 0) {
            writer.uint32(10).bytes(message.bytes);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBigInt();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.bytes = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { bytes: isSet(object.bytes) ? bytesFromBase64(object.bytes) : new Uint8Array(0) };
    },
    toJSON(message) {
        const obj = {};
        if (message.bytes.length !== 0) {
            obj.bytes = base64FromBytes(message.bytes);
        }
        return obj;
    },
    create(base) {
        return exports.BigInt.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseBigInt();
        message.bytes = (_a = object.bytes) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        return message;
    },
};
function createBaseTransactionLog() {
    return {
        address: "",
        topics: [],
        data: "",
        blockNumber: "",
        transactionHash: "",
        transactionIndex: "",
        blockHash: "",
        logIndex: "",
        removed: false,
    };
}
exports.TransactionLog = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        for (const v of message.topics) {
            writer.uint32(18).string(v);
        }
        if (message.data !== "") {
            writer.uint32(26).string(message.data);
        }
        if (message.blockNumber !== "") {
            writer.uint32(34).string(message.blockNumber);
        }
        if (message.transactionHash !== "") {
            writer.uint32(42).string(message.transactionHash);
        }
        if (message.transactionIndex !== "") {
            writer.uint32(50).string(message.transactionIndex);
        }
        if (message.blockHash !== "") {
            writer.uint32(58).string(message.blockHash);
        }
        if (message.logIndex !== "") {
            writer.uint32(66).string(message.logIndex);
        }
        if (message.removed !== false) {
            writer.uint32(72).bool(message.removed);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTransactionLog();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.topics.push(reader.string());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.data = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.blockNumber = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.transactionHash = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.transactionIndex = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.blockHash = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.logIndex = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.removed = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? gt.String(object.address) : "",
            topics: gt.Array.isArray(object === null || object === void 0 ? void 0 : object.topics) ? object.topics.map((e) => gt.String(e)) : [],
            data: isSet(object.data) ? gt.String(object.data) : "",
            blockNumber: isSet(object.blockNumber) ? gt.String(object.blockNumber) : "",
            transactionHash: isSet(object.transactionHash) ? gt.String(object.transactionHash) : "",
            transactionIndex: isSet(object.transactionIndex) ? gt.String(object.transactionIndex) : "",
            blockHash: isSet(object.blockHash) ? gt.String(object.blockHash) : "",
            logIndex: isSet(object.logIndex) ? gt.String(object.logIndex) : "",
            removed: isSet(object.removed) ? gt.Boolean(object.removed) : false,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        if ((_a = message.topics) === null || _a === void 0 ? void 0 : _a.length) {
            obj.topics = message.topics;
        }
        if (message.data !== "") {
            obj.data = message.data;
        }
        if (message.blockNumber !== "") {
            obj.blockNumber = message.blockNumber;
        }
        if (message.transactionHash !== "") {
            obj.transactionHash = message.transactionHash;
        }
        if (message.transactionIndex !== "") {
            obj.transactionIndex = message.transactionIndex;
        }
        if (message.blockHash !== "") {
            obj.blockHash = message.blockHash;
        }
        if (message.logIndex !== "") {
            obj.logIndex = message.logIndex;
        }
        if (message.removed !== false) {
            obj.removed = message.removed;
        }
        return obj;
    },
    create(base) {
        return exports.TransactionLog.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseTransactionLog();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        message.topics = ((_b = object.topics) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        message.data = (_c = object.data) !== null && _c !== void 0 ? _c : "";
        message.blockNumber = (_d = object.blockNumber) !== null && _d !== void 0 ? _d : "";
        message.transactionHash = (_e = object.transactionHash) !== null && _e !== void 0 ? _e : "";
        message.transactionIndex = (_f = object.transactionIndex) !== null && _f !== void 0 ? _f : "";
        message.blockHash = (_g = object.blockHash) !== null && _g !== void 0 ? _g : "";
        message.logIndex = (_h = object.logIndex) !== null && _h !== void 0 ? _h : "";
        message.removed = (_j = object.removed) !== null && _j !== void 0 ? _j : false;
        return message;
    },
};
function createBaseTransactionReceipt() {
    return {
        blobGasUsed: undefined,
        blockHash: "",
        blockNumber: 0,
        contractAddress: undefined,
        cumulativeGasUsed: undefined,
        effectiveGasPrice: undefined,
        from: "",
        gasUsed: undefined,
        logs: [],
        logsBloom: "",
        root: undefined,
        status: "",
        to: "",
        transactionHash: "",
        transactionIndex: 0,
        type: "",
    };
}
exports.TransactionReceipt = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.blobGasUsed !== undefined) {
            exports.BigInt.encode(message.blobGasUsed, writer.uint32(10).fork()).join();
        }
        if (message.blockHash !== "") {
            writer.uint32(18).string(message.blockHash);
        }
        if (message.blockNumber !== 0) {
            writer.uint32(24).uint64(message.blockNumber);
        }
        if (message.contractAddress !== undefined) {
            writer.uint32(34).string(message.contractAddress);
        }
        if (message.cumulativeGasUsed !== undefined) {
            exports.BigInt.encode(message.cumulativeGasUsed, writer.uint32(42).fork()).join();
        }
        if (message.effectiveGasPrice !== undefined) {
            exports.BigInt.encode(message.effectiveGasPrice, writer.uint32(50).fork()).join();
        }
        if (message.from !== "") {
            writer.uint32(58).string(message.from);
        }
        if (message.gasUsed !== undefined) {
            exports.BigInt.encode(message.gasUsed, writer.uint32(66).fork()).join();
        }
        for (const v of message.logs) {
            exports.TransactionLog.encode(v, writer.uint32(74).fork()).join();
        }
        if (message.logsBloom !== "") {
            writer.uint32(82).string(message.logsBloom);
        }
        if (message.root !== undefined) {
            writer.uint32(90).string(message.root);
        }
        if (message.status !== "") {
            writer.uint32(98).string(message.status);
        }
        if (message.to !== "") {
            writer.uint32(106).string(message.to);
        }
        if (message.transactionHash !== "") {
            writer.uint32(114).string(message.transactionHash);
        }
        if (message.transactionIndex !== 0) {
            writer.uint32(120).uint64(message.transactionIndex);
        }
        if (message.type !== "") {
            writer.uint32(130).string(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTransactionReceipt();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.blobGasUsed = exports.BigInt.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.blockHash = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.blockNumber = longToNumber(reader.uint64());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.contractAddress = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.cumulativeGasUsed = exports.BigInt.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.effectiveGasPrice = exports.BigInt.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.from = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.gasUsed = exports.BigInt.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.logs.push(exports.TransactionLog.decode(reader, reader.uint32()));
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.logsBloom = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.root = reader.string();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.status = reader.string();
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.to = reader.string();
                    continue;
                }
                case 14: {
                    if (tag !== 114) {
                        break;
                    }
                    message.transactionHash = reader.string();
                    continue;
                }
                case 15: {
                    if (tag !== 120) {
                        break;
                    }
                    message.transactionIndex = longToNumber(reader.uint64());
                    continue;
                }
                case 16: {
                    if (tag !== 130) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            blobGasUsed: isSet(object.blobGasUsed) ? exports.BigInt.fromJSON(object.blobGasUsed) : undefined,
            blockHash: isSet(object.blockHash) ? gt.String(object.blockHash) : "",
            blockNumber: isSet(object.blockNumber) ? gt.Number(object.blockNumber) : 0,
            contractAddress: isSet(object.contractAddress) ? gt.String(object.contractAddress) : undefined,
            cumulativeGasUsed: isSet(object.cumulativeGasUsed) ? exports.BigInt.fromJSON(object.cumulativeGasUsed) : undefined,
            effectiveGasPrice: isSet(object.effectiveGasPrice) ? exports.BigInt.fromJSON(object.effectiveGasPrice) : undefined,
            from: isSet(object.from) ? gt.String(object.from) : "",
            gasUsed: isSet(object.gasUsed) ? exports.BigInt.fromJSON(object.gasUsed) : undefined,
            logs: gt.Array.isArray(object === null || object === void 0 ? void 0 : object.logs) ? object.logs.map((e) => exports.TransactionLog.fromJSON(e)) : [],
            logsBloom: isSet(object.logsBloom) ? gt.String(object.logsBloom) : "",
            root: isSet(object.root) ? gt.String(object.root) : undefined,
            status: isSet(object.status) ? gt.String(object.status) : "",
            to: isSet(object.to) ? gt.String(object.to) : "",
            transactionHash: isSet(object.transactionHash) ? gt.String(object.transactionHash) : "",
            transactionIndex: isSet(object.transactionIndex) ? gt.Number(object.transactionIndex) : 0,
            type: isSet(object.type) ? gt.String(object.type) : "",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.blobGasUsed !== undefined) {
            obj.blobGasUsed = exports.BigInt.toJSON(message.blobGasUsed);
        }
        if (message.blockHash !== "") {
            obj.blockHash = message.blockHash;
        }
        if (message.blockNumber !== 0) {
            obj.blockNumber = Math.round(message.blockNumber);
        }
        if (message.contractAddress !== undefined) {
            obj.contractAddress = message.contractAddress;
        }
        if (message.cumulativeGasUsed !== undefined) {
            obj.cumulativeGasUsed = exports.BigInt.toJSON(message.cumulativeGasUsed);
        }
        if (message.effectiveGasPrice !== undefined) {
            obj.effectiveGasPrice = exports.BigInt.toJSON(message.effectiveGasPrice);
        }
        if (message.from !== "") {
            obj.from = message.from;
        }
        if (message.gasUsed !== undefined) {
            obj.gasUsed = exports.BigInt.toJSON(message.gasUsed);
        }
        if ((_a = message.logs) === null || _a === void 0 ? void 0 : _a.length) {
            obj.logs = message.logs.map((e) => exports.TransactionLog.toJSON(e));
        }
        if (message.logsBloom !== "") {
            obj.logsBloom = message.logsBloom;
        }
        if (message.root !== undefined) {
            obj.root = message.root;
        }
        if (message.status !== "") {
            obj.status = message.status;
        }
        if (message.to !== "") {
            obj.to = message.to;
        }
        if (message.transactionHash !== "") {
            obj.transactionHash = message.transactionHash;
        }
        if (message.transactionIndex !== 0) {
            obj.transactionIndex = Math.round(message.transactionIndex);
        }
        if (message.type !== "") {
            obj.type = message.type;
        }
        return obj;
    },
    create(base) {
        return exports.TransactionReceipt.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        const message = createBaseTransactionReceipt();
        message.blobGasUsed = (object.blobGasUsed !== undefined && object.blobGasUsed !== null)
            ? exports.BigInt.fromPartial(object.blobGasUsed)
            : undefined;
        message.blockHash = (_a = object.blockHash) !== null && _a !== void 0 ? _a : "";
        message.blockNumber = (_b = object.blockNumber) !== null && _b !== void 0 ? _b : 0;
        message.contractAddress = (_c = object.contractAddress) !== null && _c !== void 0 ? _c : undefined;
        message.cumulativeGasUsed = (object.cumulativeGasUsed !== undefined && object.cumulativeGasUsed !== null)
            ? exports.BigInt.fromPartial(object.cumulativeGasUsed)
            : undefined;
        message.effectiveGasPrice = (object.effectiveGasPrice !== undefined && object.effectiveGasPrice !== null)
            ? exports.BigInt.fromPartial(object.effectiveGasPrice)
            : undefined;
        message.from = (_d = object.from) !== null && _d !== void 0 ? _d : "";
        message.gasUsed = (object.gasUsed !== undefined && object.gasUsed !== null)
            ? exports.BigInt.fromPartial(object.gasUsed)
            : undefined;
        message.logs = ((_e = object.logs) === null || _e === void 0 ? void 0 : _e.map((e) => exports.TransactionLog.fromPartial(e))) || [];
        message.logsBloom = (_f = object.logsBloom) !== null && _f !== void 0 ? _f : "";
        message.root = (_g = object.root) !== null && _g !== void 0 ? _g : undefined;
        message.status = (_h = object.status) !== null && _h !== void 0 ? _h : "";
        message.to = (_j = object.to) !== null && _j !== void 0 ? _j : "";
        message.transactionHash = (_k = object.transactionHash) !== null && _k !== void 0 ? _k : "";
        message.transactionIndex = (_l = object.transactionIndex) !== null && _l !== void 0 ? _l : 0;
        message.type = (_m = object.type) !== null && _m !== void 0 ? _m : "";
        return message;
    },
};
const gt = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (gt.Buffer) {
        return Uint8Array.from(gt.Buffer.from(b64, "base64"));
    }
    else {
        const bin = gt.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (gt.Buffer) {
        return gt.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(gt.String.fromCharCode(byte));
        });
        return gt.btoa(bin.join(""));
    }
}
function longToNumber(int64) {
    const num = gt.Number(int64.toString());
    if (num > gt.Number.MAX_SAFE_INTEGER) {
        throw new gt.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (num < gt.Number.MIN_SAFE_INTEGER) {
        throw new gt.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return num;
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
